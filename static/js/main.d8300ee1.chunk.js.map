{"version":3,"sources":["views/Views.module.css","component/ContactForm/ContactForm.module.css","component/UserMenu/UserMenu.module.css","component/ContactList/ContactList.module.css","component/Filter/Filter.module.css","component/AppBar/AppBar.module.css","component/Container/Container.module.css","component/Navigation.js","redux/auth/auth-operations.js","redux/auth/auth-selectors.js","redux/auth/auth-slice.js","component/UserMenu/default-avatar.png","component/UserMenu/UserMenu.js","component/AuthNav.js","component/AppBar/AppBar.js","component/Container/Container.js","redux/contacts/contact-actions.js","redux/contacts/contact-operations.js","redux/contacts/contacts-selectors.js","redux/contacts/contact-reducer.js","component/ContactList/ContactList.js","component/Filter/Filter.js","component/ContactForm/ContactForm.js","views/ContactsView.js","views/HomeView.js","views/RegisterView.js","views/LoginView.js","App.js","redux/store.js","index.js"],"names":["module","exports","styles","link","display","textDecoration","padding","fontWeight","color","activeLink","Navigation","to","exact","style","activeStyle","axios","defaults","baseURL","token","headers","common","Authorization","register","createAsyncThunk","credentials","a","post","data","logIn","operations","logOut","fetchCurrentUser","_","thunkAPI","state","getState","auth","rejectWithValue","get","authSelectors","getIsLoggedIn","isLoggedIn","getUserName","user","name","authSlice","createSlice","initialState","email","extraReducers","authOperations","fulfilled","action","payload","pending","isFetchingCurrentUser","rejected","UserMenu","dispatch","useDispatch","useSelector","avatar","defaultAvatar","className","container","src","alt","width","type","onClick","AuthNav","AppBar","header","Container","children","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterContact","contactsOperations","fetchContact","addContact","number","contact","then","catch","error","deleteContact","contactId","delete","getFilter","contacts","filter","getAllContacts","items","contactsSelectors","getFilteredContacts","createSelector","normalizedFilter","toLowerCase","includes","getError","createReducer","id","loading","response","combineReducers","ContactList","useEffect","ContactListUl","map","ContactListLi","ContactBtnDel","onDeleteContact","Filter","value","label","input","onChange","e","target","ContactForm","useState","setName","setNumber","handleChange","event","currentTarget","onSubmit","preventDefault","alert","ContactLabel","ContactInput","pattern","title","required","ContactBtn","ContactsView","params","HomeView","RegisterView","setEmail","password","setPassword","form","autoComplete","LoginView","App","path","component","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","persistReducer","authReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8300ee1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Views_container__11ZAP\",\"title\":\"Views_title__dPvfI\",\"form\":\"Views_form__2cV4R\",\"label\":\"Views_label__DHY1X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactForm\":\"ContactForm_ContactForm__uIjhR\",\"ContactLabel\":\"ContactForm_ContactLabel__38RZ8\",\"ContactInput\":\"ContactForm_ContactInput__1fe1d\",\"ContactBtn\":\"ContactForm_ContactBtn__Wk-F9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"UserMenu_container__3A8Qx\",\"avatar\":\"UserMenu_avatar__1QBwy\",\"name\":\"UserMenu_name__3ginI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactListLi\":\"ContactList_ContactListLi__2WJ6D\",\"ContactBtnDel\":\"ContactList_ContactBtnDel__2EbsP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__rcp6n\",\"label\":\"Filter_label__31LKz\",\"input\":\"Filter_input__28FAF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"AppBar_header__3Rc1d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3WIcA\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst styles = {\r\n  link: {\r\n    display: 'inline-block',\r\n    textDecoration: 'none',\r\n    padding: 12,\r\n    fontWeight: 700,\r\n    color: '#2A363B',\r\n  },\r\n  activeLink: {\r\n    color: '#E84A5F',\r\n  },\r\n};\r\n\r\nconst Navigation = () => (\r\n  <nav>\r\n    <NavLink to=\"/\" exact style={styles.link} activeStyle={styles.activeLink}>\r\n      Home\r\n    </NavLink>\r\n\r\n    <NavLink\r\n      to=\"/contacts\"\r\n      exact\r\n      style={styles.link}\r\n      activeStyle={styles.activeLink}\r\n    >\r\n      Contacts\r\n    </NavLink>\r\n  </nav>\r\n);\r\n\r\nexport default Navigation;\r\n","import axios from 'axios';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\n// axios.defaults.baseURL = 'https://lpj-tasker.herokuapp.com';\r\naxios.defaults.baseURL='https://connections-api.herokuapp.com'\r\nconst token = {\r\n  set(token) {\r\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n  },\r\n  unset() {\r\n    axios.defaults.headers.common.Authorization = '';\r\n  },\r\n};\r\n\r\n/*\r\n * POST @ /users/signup\r\n * body: { name, email, password }\r\n * После успешной регистрации добавляем токен в HTTP-заголовок\r\n */\r\nconst register = createAsyncThunk('auth/register', async credentials => {   //отправка формы с RegisterView(handleSubmit)\r\n  try {\r\n    const { data } = await axios.post('/users/signup', credentials );  //отправляем на бек \r\n    token.set(data.token);\r\n    \r\n    return data;  //возвращаем результат ответа с бека\r\n  } catch (error) {\r\n    //  Добавить обработку ошибки error.message\r\n    // throw error;\r\n  }\r\n});\r\n\r\n/*\r\n * POST @ /users/login\r\n * body: { email, password }\r\n * После успешного логина добавляем токен в HTTP-заголовок\r\n */\r\nconst logIn = createAsyncThunk('auth/login', async credentials => {\r\n  try {\r\n    const { data } = await axios.post('/users/login', credentials);\r\n    token.set(data.token);\r\n    return data;\r\n  } catch (error) {\r\n    //  Добавить обработку ошибки error.message\r\n    //  throw error;\r\n  }\r\n});\r\n\r\n/*\r\n * POST @ /users/logout\r\n * headers: Authorization: Bearer token\r\n * После успешного логаута, удаляем токен из HTTP-заголовка\r\n */\r\nconst logOut = createAsyncThunk('auth/logout', async () => {\r\n  try {\r\n    await axios.post('/users/logout');\r\n    token.unset();\r\n  } catch (error) {\r\n    //  Добавить обработку ошибки error.message\r\n  }\r\n});\r\n/*\r\n * GET @ /users/current\r\n * headers:\r\n *    Authorization: Bearer token\r\n *\r\n * 1. Забираем токен из стейта через getState()\r\n * 2. Если токена нет, выходим не выполняя никаких операций\r\n * 3. Если токен есть, добавляет его в HTTP-заголовок и выполянем операцию\r\n */\r\nconst fetchCurrentUser = createAsyncThunk(\r\n  'auth/refresh',\r\n  async (_, thunkAPI) => {\r\n    const state = thunkAPI.getState();\r\n    const persistedToken = state.auth.token;\r\n\r\n    if (persistedToken === null) {\r\n      // console.log('Токена нет, уходим из fetchCurrentUser');\r\n      return thunkAPI.rejectWithValue();\r\n    }\r\n\r\n    // token.set(persistedToken);\r\n    try {\r\n      const { data } = await axios.get('/users/current');\r\n      return data;\r\n    } catch (error) {\r\n      // Добавить обработку ошибки error.message\r\n       \r\n    }\r\n  },\r\n);\r\n\r\nconst operations = {\r\n  register,\r\n  logOut,\r\n  logIn,\r\n  fetchCurrentUser,\r\n};\r\nexport default operations;","const getIsLoggedIn = state => state.auth.isLoggedIn;\r\n\r\nconst getUserName = state => state.auth.user.name;\r\n\r\n// const getIsFetchingCurrent = state => state.auth.isFetchingCurrentUser;\r\n\r\nconst authSelectors = {\r\n    getIsLoggedIn,\r\n    getUserName,\r\n    // getIsFetchingCurrent,\r\n};\r\n\r\nexport default authSelectors;","import { createSlice } from '@reduxjs/toolkit';\r\nimport authOperations from './auth-operations';\r\n\r\n//начальное состояние и редюсер ничего не обрабатывает\r\nconst initialState = {\r\n  user: { name: null, email: null },  //тут будет состояние с бека\r\n  token: null,  //токен нужекн чтобы скрывать приватную коллекцию\r\n  isLoggedIn: false,\r\n  // isFetchingCurrentUser: false,\r\n};\r\n\r\nconst authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  extraReducers: {\r\n    [authOperations.register.fulfilled](state, action) {\r\n      state.user = action.payload.user;\r\n      state.token = action.payload.token;\r\n      state.isLoggedIn = true;\r\n    },\r\n    [authOperations.logIn.fulfilled](state, action) {\r\n      state.user = action.payload.user;\r\n      state.token = action.payload.token;\r\n      state.isLoggedIn = true;\r\n    },\r\n    [authOperations.logOut.fulfilled](state) {\r\n      state.user = { name: null, email: null };\r\n      state.token = null;\r\n      state.isLoggedIn = false;\r\n    },\r\n    [authOperations.fetchCurrentUser.pending](state) {\r\n      state.isFetchingCurrentUser = true;\r\n    },\r\n    [authOperations.fetchCurrentUser.fulfilled](state, action) {\r\n      state.user = action.payload;\r\n      state.isLoggedIn = true;\r\n      state.isFetchingCurrentUser = false;\r\n    },\r\n    [authOperations.fetchCurrentUser.rejected](state) {\r\n      state.isFetchingCurrentUser = false;\r\n    },\r\n    },\r\n  });\r\n\r\nexport default authSlice.reducer;\r\n","export default __webpack_public_path__ + \"static/media/default-avatar.e44fc4e2.png\";","import { useDispatch, useSelector } from 'react-redux';\r\nimport { authSelectors, authOperations } from '../../redux/auth';\r\nimport defaultAvatar from './default-avatar.png';\r\nimport styles from './UserMenu.module.css'\r\n\r\nexport default function UserMenu() {\r\n  const dispatch = useDispatch();\r\n  const name = useSelector(authSelectors.getUserName);\r\n  const avatar = defaultAvatar;\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <img src={avatar} alt=\"\" width=\"32\" className={styles.avatar} />\r\n      <span className={styles.name}>Wellcome, {name}</span>\r\n      <button type=\"button\" onClick={() => dispatch(authOperations.logOut())}>\r\n        Выйти\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst styles = {\r\n  link: {\r\n    display: 'inline-block',\r\n    textDecoration: 'none',\r\n    padding: 12,\r\n    fontWeight: 700,\r\n    color: '#2A363B',\r\n  },\r\n  activeLink: {\r\n    color: '#E84A5F',\r\n  },\r\n};\r\n\r\nexport default function AuthNav() {\r\n  return (\r\n    <div>\r\n      <NavLink\r\n        to=\"/register\"\r\n        exact\r\n        style={styles.link}\r\n        activeStyle={styles.activeLink}\r\n      >\r\n        Register\r\n      </NavLink>\r\n      <NavLink\r\n        to=\"/login\"\r\n        exact\r\n        style={styles.link}\r\n        activeStyle={styles.activeLink}\r\n      >\r\n        Login\r\n      </NavLink>\r\n    </div>\r\n  );\r\n}\r\n","import { useSelector } from 'react-redux';\r\nimport Navigation from '../Navigation';\r\nimport UserMenu from '../UserMenu';\r\nimport AuthNav from '../AuthNav';\r\nimport { authSelectors } from '../../redux/auth';\r\nimport styles from './AppBar.module.css'\r\n\r\nexport default function AppBar() {\r\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\r\n  return (\r\n    <header className={styles.header}>\r\n      <Navigation />\r\n      {/* <AuthNav /> */}\r\n      {/* <UserMenu /> */}\r\n      {isLoggedIn ? <UserMenu /> : <AuthNav />}\r\n    </header>\r\n  );\r\n}\r\n","import styles from './Container.module.css';\r\n\r\nexport default function Container({ children }) {\r\n  return <div className={styles.container}>{children}</div>;\r\n}\r\n","\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactError = createAction('contacts/fetchContactError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const filterContact = createAction('contacts/filter');\r\n","import axios from 'axios';\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    fetchContactRequest,\r\n    fetchContactSuccess,\r\n    fetchContactError,\r\n} from './contact-actions';\r\n\r\nconst fetchContact = () => async dispatch => {\r\n    dispatch(fetchContactRequest());\r\n    try {\r\n        const { data } = await axios.get('/contacts');\r\n        dispatch(fetchContactSuccess(data));\r\n    } catch (error) {\r\n        dispatch(fetchContactError(error));\r\n    }\r\n}\r\n\r\n// export const fetchContact = () => dispatch => {\r\n//     dispatch(fetchContactRequest());\r\n//     axios.get('/contacts')\r\n//         .then(({ data }) => dispatch(fetchContactSuccess(data)))\r\n//         .catch(error => dispatch(fetchContactError(error)))\r\n// }\r\n\r\n\r\nconst addContact = ({ name, number } ) => dispatch => {\r\n    const contact = { name, number };\r\n    dispatch(addContactRequest());\r\n    axios.post(`/contacts`, contact)\r\n        .then(({ data }) => dispatch(addContactSuccess(data)),\r\n        )\r\n        .catch(error => dispatch(addContactError(error)))\r\n}\r\n\r\nconst deleteContact = contactId => dispatch => {\r\n    dispatch(deleteContactRequest());\r\n\r\n    axios.delete(`/contacts/${contactId}`)\r\n        .then(() => dispatch(deleteContactSuccess(contactId)))\r\n        .catch(error => dispatch(deleteContactError(error)));\r\n}\r\n\r\nconst contactsOperations = {\r\n    fetchContact,\r\n    addContact,\r\n    deleteContact,\r\n};\r\n\r\nexport default contactsOperations;","import { createSelector } from 'reselect';\r\n\r\nconst getFilter = state => state.contacts.filter;\r\nconst getError = state => state.contacts.error;\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\nconst getFilteredContacts = createSelector(\r\n    [getAllContacts, getFilter], (contacts,filter) => {\r\n        const normalizedFilter = filter.toLowerCase();\r\n        \r\n        return contacts.filter(({ name }) =>\r\n            name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n})\r\n\r\nconst contactsSelectors = {\r\n    getFilter,\r\n    getAllContacts,\r\n    getFilteredContacts,\r\n    getError,\r\n}\r\n\r\nexport default contactsSelectors;","import { combineReducers } from \"redux\";\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    fetchContactRequest,\r\n    fetchContactSuccess,\r\n    fetchContactError,\r\n    filterContact,\r\n} from './contact-actions';\r\n\r\nconst items = createReducer([], {\r\n    [fetchContactSuccess]: (_, { payload }) => payload,\r\n    [addContactSuccess]: (state, { payload }) =>\r\n        [...state, payload],\r\n    [deleteContactSuccess]: (state, { payload }) =>\r\n        state.filter(({ id }) => id !== payload),\r\n})\r\n\r\nconst filter = createReducer('', {\r\n    [filterContact]: (_, { payload }) => payload,\r\n})\r\n\r\nconst loading = createReducer(false, {\r\n    [fetchContactRequest]: () => true,\r\n    [fetchContactSuccess]: () => false,\r\n    [fetchContactError]: () => false,\r\n    [addContactRequest]: () => true,\r\n    [addContactSuccess]: () => false,\r\n    [addContactError]: () => false,\r\n    [deleteContactRequest]: () => true,\r\n    [deleteContactSuccess]: () => false,\r\n    [deleteContactError]: () => false,\r\n\r\n})\r\n\r\nconst error = createReducer(null, {\r\n    [fetchContactRequest]: () => null,\r\n    [fetchContactError]: (_, { payload }) => payload.response.data,\r\n    [addContactRequest]: () => null,\r\n    [addContactError]: (_, { payload }) => payload.response.data,\r\n    [deleteContactRequest]: () => null,\r\n    [deleteContactError]: (_, { payload }) => payload.response.data,\r\n});\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n    loading,\r\n    error,\r\n})","// import React from 'react'\r\nimport style from './ContactList.module.css'\r\nimport {contactsOperations, contactsSelectors } from '../../redux/contacts';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useEffect } from 'react';\r\n\r\nexport default function ContactList() {\r\n    const dispatch = useDispatch();\r\n    const contacts = useSelector(contactsSelectors.getFilteredContacts);\r\n    const onDeleteContact= id => dispatch(contactsOperations.deleteContact(id));\r\n    \r\n    useEffect(() => {\r\n        dispatch(contactsOperations.fetchContact());\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <ul className={style.ContactListUl}>\r\n            {contacts.map(({ id, name, number }) => (\r\n                <li className={style.ContactListLi} key={id}>\r\n                    <p>{name}: \r\n                        <span>{number}</span>\r\n                    </p> \r\n                    <button\r\n                        type=\"button\"\r\n                        className={style.ContactBtnDel}\r\n                        onClick={()=>onDeleteContact(id)}>Delete</button>  \r\n                </li>\r\n            ))}\r\n        </ul>\r\n)\r\n} \r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport { contactsSelectors, filterContact } from '../../redux/contacts';\r\nimport styles from './Filter.module.css';\r\n\r\nexport default function Filter() {\r\n  const dispatch = useDispatch();\r\n  const value = useSelector(contactsSelectors.getFilter);\r\n\r\n  return (\r\n    <div className={styles.filter}>\r\n      <p className={styles.label}>Find contacts by name</p>\r\n      <input\r\n        type=\"text\"\r\n        className={styles.input}\r\n        value={value}\r\n        onChange={e => dispatch(filterContact(e.target.value))}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport style from './ContactForm.module.css';\r\nimport { contactsSelectors, contactsOperations } from '../../redux/contacts';\r\n\r\nexport default  function ContactForm () {\r\n    const dispatch = useDispatch();\r\n    const contacts = useSelector(contactsSelectors.getAllContacts);\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n    \r\n    const handleChange = event => {\r\n        const { name, value } = event.currentTarget;\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n            case 'number':\r\n                setNumber(value);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n    \r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        if (contacts.map(contact => contact.name).includes(name)) {\r\n            return alert(`${name} is already in contacs.`)\r\n        }\r\n\r\n        dispatch(contactsOperations.addContact({ name, number }));\r\n        setName('');\r\n        setNumber('');\r\n    }\r\n    \r\n    return (\r\n        <form className={style.ContactForm} onSubmit={handleSubmit}>\r\n            <label className={style.ContactLabel}>\r\n                Name\r\n                <input\r\n                    className={style.ContactInput}\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\" required\r\n                    // required\r\n                    value={name}\r\n                    onChange={handleChange}\r\n                />\r\n            </label>\r\n            <label  className={style.ContactLabel}>\r\n                Number\r\n                <input\r\n                    className={style.ContactInput}\r\n                    type=\"tel\"\r\n                    name=\"number\"\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                    value={number}\r\n                    onChange={handleChange} />\r\n            </label>\r\n\r\n            <button\r\n                className={style.ContactBtn}\r\n                type=\"submit\">Add contact</button>\r\n        </form>\r\n    );\r\n}\r\n\r\n\r\n// import React, { useState } from 'react'\r\n// import { v4 as uuidv4 } from 'uuid';\r\n// import style from './ContactForm.module.css'\r\n// import PropTypes from 'prop-types';\r\n// import { connect } from 'react-redux';\r\n// import { contactsOperations } from '../../redux/contacts';\r\n\r\n// const ContactForm = ({ onAddSubmit }) => {\r\n\r\n//     const [name, setName] = useState('');\r\n//     const [number, setNumber] = useState('');\r\n    \r\n//     const nameInputId = uuidv4();\r\n//     const numberInputId = uuidv4();\r\n\r\n    \r\n//     const handleChange = event => {\r\n//         const { name, value } = event.currentTarget;\r\n\r\n//         switch (name) {\r\n//             case 'name':\r\n//                 setName(value);\r\n//                 break;\r\n//             case 'number':\r\n//                 setNumber(value);\r\n//                 break;\r\n//             default:\r\n//                 return;\r\n//         }\r\n//     };\r\n    \r\n\r\n//     const handleSubmit = e => {\r\n//         e.preventDefault();\r\n//         onAddSubmit(name, number);\r\n//         return reset();\r\n//     };\r\n\r\n//     const reset = () => {\r\n//         setNumber(\"\");\r\n//         setName(\"\")\r\n//     }\r\n//     return (\r\n//         <form className={style.ContactForm} onSubmit={handleSubmit}>\r\n//             <label className={style.ContactLabel} htmlFor={nameInputId}>\r\n//                 Имя\r\n//                 <input\r\n//                     className={style.ContactInput}\r\n//                     type=\"text\"\r\n//                     name=\"name\"\r\n//                     pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//                     title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\" required\r\n//                     // required\r\n//                     id={nameInputId}\r\n//                     value={name}\r\n//                     onChange={handleChange}\r\n//                 />\r\n//             </label>\r\n//             <label htmlFor={numberInputId} className={style.ContactLabel}>\r\n//                 Номер\r\n//                 <input\r\n//                     className={style.ContactInput}\r\n//                     type=\"tel\"\r\n//                     name=\"number\"\r\n//                     pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//                     title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//                     required\r\n//                     value={number}\r\n//                     onChange={handleChange}\r\n//                     id={numberInputId} />\r\n//             </label>\r\n\r\n//             <button\r\n//                 className={style.ContactBtn}\r\n//                 type=\"submit\">Add contact</button>\r\n//         </form>\r\n//     );\r\n// }\r\n//     ContactForm.propTypes = {\r\n//         name: PropTypes.string,\r\n//         number: PropTypes.number,\r\n// };\r\n    \r\n// const mapDispatchToProps = dispatch => ({\r\n//     onAddSubmit: (name, number) => dispatch(contactsOperations.addContact(name, number)),\r\n// });\r\n\r\n// export default connect(null, mapDispatchToProps)(ContactForm)","import { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport Container from '../component/Container';\r\nimport ContactList from '../component/ContactList';\r\nimport Filter from '../component/Filter';\r\nimport ContactForm from '../component/ContactForm';\r\nimport { contactsOperations} from '../redux/contacts';\r\n\r\n\r\nexport default function ContactsView(params) {\r\n  const dispatch = useDispatch();\r\n  // const isLoadingContacts = useSelector(contactsSelectors.getLoading);\r\n\r\n  useEffect(() => dispatch(contactsOperations.fetchContact()), [dispatch]);\r\n\r\n  return (\r\n    <Container>\r\n      \r\n      {/* {isLoadingContacts && <h1>Загружаем...</h1>} */}\r\n      <ContactForm />\r\n      <Filter />\r\n      <ContactList />\r\n    </Container>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport styles from './Views.module.css';\r\n\r\nconst HomeView = () => (\r\n    <div className={styles.container}>\r\n        <h1 className={styles.title}>\r\n           Phonebook\r\n        </h1>\r\n    </div>\r\n);\r\n\r\nexport default HomeView;","import { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { authOperations } from '../redux/auth';\r\nimport styles from './Views.module.css';\r\n\r\nexport default function RegisterView() {\r\n    const dispatch = useDispatch();\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const handleChange = ({ target: { name, value } }) => {\r\n        switch (name) {\r\n            case 'name':\r\n                return setName(value);\r\n            case 'email':\r\n                return setEmail(value);\r\n            case 'password':\r\n                return setPassword(value);\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        dispatch(authOperations.register({ name, email, password }));\r\n        setName('');\r\n        setEmail('');\r\n        setPassword('');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Страница регистрации</h1>\r\n\r\n            <form onSubmit={handleSubmit} className={styles.form} autoComplete=\"off\">\r\n                <label className={styles.label}>\r\n                    Имя\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        value={name}\r\n                        onChange={handleChange} />\r\n                </label>\r\n\r\n                <label className={styles.label}>\r\n                    Почта\r\n                    <input\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        value={email}\r\n                        onChange={handleChange}\r\n                    />\r\n                </label>\r\n\r\n                <label className={styles.label}>\r\n                    \r\n                    Пароль\r\n                    <input\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        value={password}\r\n                        onChange={handleChange}\r\n                    />\r\n                </label>\r\n            <button type=\"submit\">Зарегистрироваться</button>\r\n            </form>\r\n        </div>\r\n        );\r\n  }\r\n\r\n// const mapDispatchToProps = {\r\n//   onRegister: authOperations.register,\r\n// };\r\n\r\n// export default connect(null, mapDispatchToProps)(RegisterView);","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { authOperations } from '../redux/auth';\r\nimport styles from './Views.module.css';\r\n\r\nexport default function LoginView() {\r\n  const dispatch = useDispatch();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const handleChange = ({ target: { name, value } }) => {\r\n    switch (name) {\r\n      case 'email':\r\n        return setEmail(value);\r\n      case 'password':\r\n        return setPassword(value);\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    dispatch(authOperations.logIn({ email, password }));\r\n    setEmail('');\r\n    setPassword('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Страница логина</h1>\r\n\r\n      <form onSubmit={handleSubmit} className={styles.form} autoComplete=\"off\">\r\n        <label className={styles.label}>\r\n          Почта\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            value={email}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n\r\n        <label className={styles.label}>\r\n          Пароль\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            value={password}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n\r\n        <button type=\"submit\">Войти</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","// import { useEffect } from 'react';\n// import { useDispatch } from 'react-redux';\nimport { Switch, Route } from 'react-router-dom';\nimport AppBar from './component/AppBar/AppBar';\nimport ContactsView from './views/ContactsView';\nimport HomeView from './views/HomeView';\nimport RegisterView from './views/RegisterView';\nimport LoginView from './views/LoginView';\nimport Container from './component/Container'\n// import { authOperations } from './redux/auth';\n// import './App.css'\n\nexport default function App() {\n  // const dispatch = useDispatch();\n\n  // useEffect(() => {\n  //   dispatch(authOperations.fetchCurrentUser());\n  // }, [dispatch]);\n\n  return (\n    <Container>\n      <AppBar />\n\n      <Switch>\n        <Route exact path=\"/\" component={HomeView} />\n        <Route path=\"/register\" component={RegisterView} />\n        <Route path=\"/login\" component={LoginView} />\n        <Route path=\"/contacts\" component={ContactsView} />\n      </Switch>\n    </Container>\n  );\n}\n\n","// import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n// import contactReducer from './contacts/contact-reducer';\r\n// import { authReducer } from './auth';\r\n// import {\r\n//     persistStore,\r\n//     persistReducer,\r\n//     FLUSH,\r\n//     REHYDRATE,\r\n//     PAUSE,\r\n//     PERSIST,\r\n//     PURGE,\r\n//     REGISTER\r\n// } from 'redux-persist';\r\n// import storage from 'redux-persist/lib/storage';\r\n\r\n// // import persistReducer from 'redux-persist/es/persistReducer';\r\n\r\n// const middleware = [...getDefaultMiddleware({\r\n//     serializableCheck: {\r\n//         ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n//     },\r\n// }),\r\n// ];\r\n\r\n// const authPersistConfig = {\r\n//     key: 'auth',\r\n//     storage,\r\n//     whitelist: ['token'],\r\n// };\r\n\r\n// export const store = configureStore({\r\n//     reducer: {\r\n//         contacts: contactReducer,\r\n//         auth: persistReducer(authPersistConfig, authReducer),\r\n//     },\r\n//     middleware,\r\n//     devTools: process.env.NODE_ENV === 'development',\r\n// })\r\n\r\n// export const persistor = persistStore(store);\r\n\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { contactsReducer }  from './contacts';\r\nimport { authReducer } from './auth';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n];\r\n\r\nconst authPersistConfig = {\r\n  key: 'auth',\r\n  storage,\r\n  whitelist: ['token'],\r\n};\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    auth: persistReducer(authPersistConfig, authReducer),\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport const persistor = persistStore(store);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { persistor, store } from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}