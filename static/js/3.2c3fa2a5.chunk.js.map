{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","component/ContactList/ContactList.module.css","component/Filter/Filter.module.css","component/ContactForm/ContactForm.module.css","component/ContactList/ContactList.js","component/Filter/Filter.js","component/ContactForm/ContactForm.js","views/ContactsView.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","module","exports","ContactList","dispatch","useDispatch","contacts","useSelector","contactsSelectors","getFilteredContacts","useEffect","contactsOperations","fetchContact","className","style","ContactListUl","map","id","name","number","ContactListLi","type","ContactBtnDel","onClick","deleteContact","onDeleteContact","Filter","getFilter","styles","filter","label","input","onChange","e","filterContact","target","ContactForm","getAllContacts","useState","setName","setNumber","handleChange","event","currentTarget","onSubmit","preventDefault","contact","includes","alert","addContact","ContactLabel","ContactInput","pattern","title","required","ContactBtn","ContactsView","params","Container"],"mappings":"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","file":"static/js/3.2c3fa2a5.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactListLi\":\"ContactList_ContactListLi__2WJ6D\",\"ContactBtnDel\":\"ContactList_ContactBtnDel__2EbsP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__rcp6n\",\"label\":\"Filter_label__31LKz\",\"input\":\"Filter_input__28FAF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactForm\":\"ContactForm_ContactForm__uIjhR\",\"ContactLabel\":\"ContactForm_ContactLabel__38RZ8\",\"ContactInput\":\"ContactForm_ContactInput__1fe1d\",\"ContactBtn\":\"ContactForm_ContactBtn__Wk-F9\"};","// import React from 'react'\r\nimport style from './ContactList.module.css'\r\nimport {contactsOperations, contactsSelectors } from '../../redux/contacts';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useEffect } from 'react';\r\n\r\nexport default function ContactList() {\r\n    const dispatch = useDispatch();\r\n    const contacts = useSelector(contactsSelectors.getFilteredContacts);\r\n    const onDeleteContact= id => dispatch(contactsOperations.deleteContact(id));\r\n    \r\n    useEffect(() => {\r\n        dispatch(contactsOperations.fetchContact());\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <ul className={style.ContactListUl}>\r\n            {contacts.map(({ id, name, number }) => (\r\n                <li className={style.ContactListLi} key={id}>\r\n                    <p>{name}: \r\n                        <span>{number}</span>\r\n                    </p> \r\n                    <button\r\n                        type=\"button\"\r\n                        className={style.ContactBtnDel}\r\n                        onClick={()=>onDeleteContact(id)}>Delete</button>  \r\n                </li>\r\n            ))}\r\n        </ul>\r\n)\r\n} \r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport { contactsSelectors, filterContact } from '../../redux/contacts';\r\nimport styles from './Filter.module.css';\r\n\r\nexport default function Filter() {\r\n  const dispatch = useDispatch();\r\n  const value = useSelector(contactsSelectors.getFilter);\r\n\r\n  return (\r\n    <div className={styles.filter}>\r\n      <p className={styles.label}>Find contacts by name</p>\r\n      <input\r\n        type=\"text\"\r\n        className={styles.input}\r\n        value={value}\r\n        onChange={e => dispatch(filterContact(e.target.value))}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport style from './ContactForm.module.css';\r\nimport { contactsSelectors, contactsOperations } from '../../redux/contacts';\r\n\r\nexport default  function ContactForm () {\r\n    const dispatch = useDispatch();\r\n    const contacts = useSelector(contactsSelectors.getAllContacts);\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n    \r\n    const handleChange = event => {\r\n        const { name, value } = event.currentTarget;\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n            case 'number':\r\n                setNumber(value);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n    \r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        if (contacts.map(contact => contact.name).includes(name)) {\r\n            return alert(`${name} is already in contacs.`)\r\n        }\r\n\r\n        dispatch(contactsOperations.addContact({ name, number }));\r\n        setName('');\r\n        setNumber('');\r\n    }\r\n    \r\n    return (\r\n        <form className={style.ContactForm} onSubmit={handleSubmit}>\r\n            <label className={style.ContactLabel}>\r\n                Name\r\n                <input\r\n                    className={style.ContactInput}\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\" required\r\n                    // required\r\n                    value={name}\r\n                    onChange={handleChange}\r\n                />\r\n            </label>\r\n            <label  className={style.ContactLabel}>\r\n                Number\r\n                <input\r\n                    className={style.ContactInput}\r\n                    type=\"tel\"\r\n                    name=\"number\"\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                    value={number}\r\n                    onChange={handleChange} />\r\n            </label>\r\n\r\n            <button\r\n                className={style.ContactBtn}\r\n                type=\"submit\">Add contact</button>\r\n        </form>\r\n    );\r\n}\r\n\r\n\r\n// import React, { useState } from 'react'\r\n// import { v4 as uuidv4 } from 'uuid';\r\n// import style from './ContactForm.module.css'\r\n// import PropTypes from 'prop-types';\r\n// import { connect } from 'react-redux';\r\n// import { contactsOperations } from '../../redux/contacts';\r\n\r\n// const ContactForm = ({ onAddSubmit }) => {\r\n\r\n//     const [name, setName] = useState('');\r\n//     const [number, setNumber] = useState('');\r\n    \r\n//     const nameInputId = uuidv4();\r\n//     const numberInputId = uuidv4();\r\n\r\n    \r\n//     const handleChange = event => {\r\n//         const { name, value } = event.currentTarget;\r\n\r\n//         switch (name) {\r\n//             case 'name':\r\n//                 setName(value);\r\n//                 break;\r\n//             case 'number':\r\n//                 setNumber(value);\r\n//                 break;\r\n//             default:\r\n//                 return;\r\n//         }\r\n//     };\r\n    \r\n\r\n//     const handleSubmit = e => {\r\n//         e.preventDefault();\r\n//         onAddSubmit(name, number);\r\n//         return reset();\r\n//     };\r\n\r\n//     const reset = () => {\r\n//         setNumber(\"\");\r\n//         setName(\"\")\r\n//     }\r\n//     return (\r\n//         <form className={style.ContactForm} onSubmit={handleSubmit}>\r\n//             <label className={style.ContactLabel} htmlFor={nameInputId}>\r\n//                 Имя\r\n//                 <input\r\n//                     className={style.ContactInput}\r\n//                     type=\"text\"\r\n//                     name=\"name\"\r\n//                     pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//                     title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\" required\r\n//                     // required\r\n//                     id={nameInputId}\r\n//                     value={name}\r\n//                     onChange={handleChange}\r\n//                 />\r\n//             </label>\r\n//             <label htmlFor={numberInputId} className={style.ContactLabel}>\r\n//                 Номер\r\n//                 <input\r\n//                     className={style.ContactInput}\r\n//                     type=\"tel\"\r\n//                     name=\"number\"\r\n//                     pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//                     title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//                     required\r\n//                     value={number}\r\n//                     onChange={handleChange}\r\n//                     id={numberInputId} />\r\n//             </label>\r\n\r\n//             <button\r\n//                 className={style.ContactBtn}\r\n//                 type=\"submit\">Add contact</button>\r\n//         </form>\r\n//     );\r\n// }\r\n//     ContactForm.propTypes = {\r\n//         name: PropTypes.string,\r\n//         number: PropTypes.number,\r\n// };\r\n    \r\n// const mapDispatchToProps = dispatch => ({\r\n//     onAddSubmit: (name, number) => dispatch(contactsOperations.addContact(name, number)),\r\n// });\r\n\r\n// export default connect(null, mapDispatchToProps)(ContactForm)","import { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport Container from '../component/Container';\r\nimport ContactList from '../component/ContactList';\r\nimport Filter from '../component/Filter';\r\nimport ContactForm from '../component/ContactForm';\r\nimport { contactsOperations} from '../redux/contacts';\r\n\r\n\r\nexport default function ContactsView(params) {\r\n  const dispatch = useDispatch();\r\n  // const isLoadingContacts = useSelector(contactsSelectors.getLoading);\r\n\r\n  useEffect(() => dispatch(contactsOperations.fetchContact()), [dispatch]);\r\n\r\n  return (\r\n    <Container>\r\n      \r\n      {/* {isLoadingContacts && <h1>Загружаем...</h1>} */}\r\n      <ContactForm />\r\n      <Filter />\r\n      <ContactList />\r\n    </Container>\r\n  );\r\n}\r\n"],"sourceRoot":""}