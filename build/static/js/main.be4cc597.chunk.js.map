{"version":3,"sources":["views/Views.module.css","component/ContactForm/ContactForm.module.css","component/UserMenu/UserMenu.module.css","component/ContactList/ContactList.module.css","component/Filter/Filter.module.css","component/AppBar/AppBar.module.css","component/Container/Container.module.css","component/Navigation.js","redux/auth/auth-operations.js","redux/auth/auth-selectors.js","redux/auth/auth-slice.js","component/UserMenu/default-avatar.png","component/UserMenu/UserMenu.js","component/AuthNav.js","component/AppBar/AppBar.js","component/Container/Container.js","redux/contacts/contact-actions.js","redux/contacts/contact-operations.js","redux/contacts/contacts-selectors.js","redux/contacts/contact-reducer.js","component/ContactList/ContactList.js","component/Filter/Filter.js","component/ContactForm/ContactForm.js","views/ContactsView.js","views/HomeView.js","views/RegisterView.js","views/LoginView.js","App.js","redux/store.js","index.js"],"names":["module","exports","styles","link","display","textDecoration","padding","fontWeight","color","activeLink","Navigation","to","exact","style","activeStyle","axios","defaults","baseURL","token","headers","common","Authorization","register","createAsyncThunk","credentials","a","post","data","logIn","operations","logOut","fetchCurrentUser","_","thunkAPI","state","getState","persistedToken","auth","rejectWithValue","get","authSelectors","getIsLoggedIn","isLoggedIn","getUsername","user","name","authSlice","createSlice","initialState","email","extraReducers","authOperations","fulfiled","action","payload","fulfilled","UserMenu","dispatch","useDispatch","useSelector","avatar","defaultAvatar","className","container","src","alt","width","type","onClick","AuthNav","AppBar","header","Container","children","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterContact","contactsOperations","fetchContact","addContact","number","contact","then","catch","error","deleteContact","contactId","delete","getFilter","contacts","filter","getAllContacts","items","contactsSelectors","getFilteredContacts","createSelector","normalizedFilter","toLowerCase","includes","createReducer","id","loading","combineReducers","ContactList","useEffect","ContactListUl","map","ContactListLi","ContactBtnDel","onDeleteContact","Filter","value","label","input","onChange","e","target","ContactForm","useState","setName","setNumber","nameInputId","uuidv4","numberInputId","handleChange","event","currentTarget","onSubmit","preventDefault","ContactLabel","htmlFor","ContactInput","pattern","title","required","ContactBtn","ContactsView","params","HomeView","RegisterView","setEmail","password","setPasword","form","autoComplete","LoginView","setPassword","sclassName","App","path","component","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","persistReducer","authReducer","contactReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.be4cc597.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Views_container__11ZAP\",\"title\":\"Views_title__dPvfI\",\"form\":\"Views_form__2cV4R\",\"label\":\"Views_label__DHY1X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactForm\":\"ContactForm_ContactForm__uIjhR\",\"ContactLabel\":\"ContactForm_ContactLabel__38RZ8\",\"ContactInput\":\"ContactForm_ContactInput__1fe1d\",\"ContactBtn\":\"ContactForm_ContactBtn__Wk-F9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"UserMenu_container__3A8Qx\",\"avatar\":\"UserMenu_avatar__1QBwy\",\"name\":\"UserMenu_name__3ginI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactListLi\":\"ContactList_ContactListLi__2WJ6D\",\"ContactBtnDel\":\"ContactList_ContactBtnDel__2EbsP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__rcp6n\",\"label\":\"Filter_label__31LKz\",\"input\":\"Filter_input__28FAF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"AppBar_header__3Rc1d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3WIcA\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst styles = {\r\n  link: {\r\n    display: 'inline-block',\r\n    textDecoration: 'none',\r\n    padding: 12,\r\n    fontWeight: 700,\r\n    color: '#2A363B',\r\n  },\r\n  activeLink: {\r\n    color: '#E84A5F',\r\n  },\r\n};\r\n\r\nconst Navigation = () => (\r\n  <nav>\r\n    <NavLink to=\"/\" exact style={styles.link} activeStyle={styles.activeLink}>\r\n      Home\r\n    </NavLink>\r\n\r\n    <NavLink\r\n      to=\"/contacts\"\r\n      exact\r\n      style={styles.link}\r\n      activeStyle={styles.activeLink}\r\n    >\r\n      Contacts\r\n    </NavLink>\r\n  </nav>\r\n);\r\n\r\nexport default Navigation;\r\n","import axios from 'axios';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\n// axios.defaults.baseURL = 'https://lpj-tasker.herokuapp.com';\r\naxios.defaults.baseURL='https://connections-api.herokuapp.com'\r\n\r\nconst token = {\r\n  set(token) {\r\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n  },\r\n  unset() {\r\n    axios.defaults.headers.common.Authorization = '';\r\n  },\r\n};\r\n\r\n/*\r\n * POST @ /users/signup\r\n * body: { name, email, password }\r\n * После успешной регистрации добавляем токен в HTTP-заголовок\r\n */\r\nconst register = createAsyncThunk('auth/register', async credentials => {\r\n  try {\r\n    const { data } = await axios.post('/users/signup', credentials);\r\n    token.set(data.token);\r\n    return data;\r\n  } catch (error) {\r\n    //  Добавить обработку ошибки error.message\r\n  }\r\n});\r\n\r\n/*\r\n * POST @ /users/login\r\n * body: { email, password }\r\n * После успешного логина добавляем токен в HTTP-заголовок\r\n */\r\nconst logIn = createAsyncThunk('auth/login', async credentials => {\r\n  try {\r\n    const { data } = await axios.post('/users/login', credentials);\r\n    token.set(data.token);\r\n    return data;\r\n  } catch (error) {\r\n    //  Добавить обработку ошибки error.message\r\n  }\r\n});\r\n\r\n/*\r\n * POST @ /users/logout\r\n * headers: Authorization: Bearer token\r\n * После успешного логаута, удаляем токен из HTTP-заголовка\r\n */\r\nconst logOut = createAsyncThunk('auth/logout', async () => {\r\n  try {\r\n    await axios.post('/users/logout');\r\n    token.unset();\r\n  } catch (error) {\r\n    //  Добавить обработку ошибки error.message\r\n  }\r\n});\r\n/*\r\n * GET @ /users/current\r\n * headers:\r\n *    Authorization: Bearer token\r\n *\r\n * 1. Забираем токен из стейта через getState()\r\n * 2. Если токена нет, выходим не выполняя никаких операций\r\n * 3. Если токен есть, добавляет его в HTTP-заголовок и выполянем операцию\r\n */\r\nconst fetchCurrentUser = createAsyncThunk(\r\n  'auth/refresh',\r\n  async (_, thunkAPI) => {\r\n    const state = thunkAPI.getState();\r\n    const persistedToken = state.auth.token;\r\n\r\n    if (persistedToken === null) {\r\n      // console.log('Токена нет, уходим из fetchCurrentUser');\r\n      return thunkAPI.rejectWithValue();\r\n    }\r\n\r\n    token.set(persistedToken);\r\n    try {\r\n      const { data } = await axios.get('/users/current');\r\n      return data;\r\n    } catch (error) {\r\n      // Добавить обработку ошибки error.message\r\n    }\r\n  },\r\n);\r\n\r\nconst operations = {\r\n  register,\r\n  logOut,\r\n  logIn,\r\n  fetchCurrentUser,\r\n};\r\nexport default operations;","const getIsLoggedIn = state => state.auth.isLoggedIn;\r\n\r\nconst getUsername = state => state.auth.user.name;\r\n\r\nconst authSelectors = {\r\n    getIsLoggedIn,\r\n    getUsername,\r\n};\r\nexport default authSelectors;","import { createSlice } from '@reduxjs/toolkit';\r\nimport authOperations from './auth-operations';\r\n\r\nconst initialState = {\r\n    user: { name: null, email: null },\r\n    token: null,\r\n    isLoggedIn: false,\r\n};\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    extraReducers: {\r\n        [authOperations.register.fulfiled](state, action) {\r\n            state.user = action.payload.user;\r\n            state.token = action.payload.token;\r\n            state.isLoggedIn = true;\r\n        },\r\n        [authOperations.logIn.fulfilled](state, action) {\r\n          state.user = action.payload.user;\r\n          state.token = action.payload.token;\r\n          state.isLoggedIn = true;\r\n        },\r\n        [authOperations.logOut.fulfilled](state) {\r\n          state.user = { name: null, email: null };\r\n          state.token = null;\r\n          state.isLoggedIn = false;\r\n        },\r\n        [authOperations.fetchCurrentUser.fulfilled](state, action) {\r\n          state.user = action.payload;\r\n          state.isLoggedIn = true;\r\n            }\r\n        },\r\n      });\r\n\r\nexport default authSlice.reducer;\r\n","export default __webpack_public_path__ + \"static/media/default-avatar.e44fc4e2.png\";","import { useDispatch, useSelector } from 'react-redux';\r\nimport { authSelectors, authOperations } from '../../redux/auth';\r\nimport defaultAvatar from './default-avatar.png';\r\nimport styles from './UserMenu.module.css'\r\n\r\nexport default function UserMenu() {\r\n  const dispatch = useDispatch();\r\n  const name = useSelector(authSelectors.getUsername);\r\n  const avatar = defaultAvatar;\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <img src={avatar} alt=\"\" width=\"32\" className={styles.avatar} />\r\n      <span className={styles.name}>Wellcome, {name}</span>\r\n      <button type=\"button\" onClick={() => dispatch(authOperations.logOut())}>\r\n        Выйти\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst styles = {\r\n  link: {\r\n    display: 'inline-block',\r\n    textDecoration: 'none',\r\n    padding: 12,\r\n    fontWeight: 700,\r\n    color: '#2A363B',\r\n  },\r\n  activeLink: {\r\n    color: '#E84A5F',\r\n  },\r\n};\r\n\r\nexport default function AuthNav() {\r\n  return (\r\n    <div>\r\n      <NavLink\r\n        to=\"/register\"\r\n        exact\r\n        style={styles.link}\r\n        activeStyle={styles.activeLink}\r\n      >\r\n        Register\r\n      </NavLink>\r\n      <NavLink\r\n        to=\"/login\"\r\n        exact\r\n        style={styles.link}\r\n        activeStyle={styles.activeLink}\r\n      >\r\n        Login\r\n      </NavLink>\r\n    </div>\r\n  );\r\n}\r\n","import { useSelector } from 'react-redux';\r\nimport Navigation from '../Navigation';\r\nimport UserMenu from '../UserMenu';\r\nimport AuthNav from '../AuthNav';\r\nimport { authSelectors } from '../../redux/auth';\r\nimport styles from './AppBar.module.css'\r\n\r\nexport default function AppBar() {\r\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\r\n  return (\r\n    <header className={styles.header}>\r\n      <Navigation />\r\n      {isLoggedIn ? <UserMenu /> : <AuthNav />}\r\n    </header>\r\n  );\r\n}\r\n","import styles from './Container.module.css';\r\n\r\nexport default function Container({ children }) {\r\n  return <div className={styles.container}>{children}</div>;\r\n}\r\n","\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactError = createAction('contacts/fetchContactError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const filterContact = createAction('contacts/filter');\r\n","import axios from 'axios';\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    fetchContactRequest,\r\n    fetchContactSuccess,\r\n    fetchContactError,\r\n} from './contact-actions';\r\n\r\nconst fetchContact = () => async dispatch => {\r\n    dispatch(fetchContactRequest());\r\n    try {\r\n        const { data } = await axios.get('/contacts');\r\n        dispatch(fetchContactSuccess(data));\r\n    } catch (error) {\r\n        dispatch(fetchContactError(error));\r\n    }\r\n}\r\n\r\n// export const fetchContact = () => dispatch => {\r\n//     dispatch(fetchContactRequest());\r\n//     axios.get('/contacts')\r\n//         .then(({ data }) => dispatch(fetchContactSuccess(data)))\r\n//         .catch(error => dispatch(fetchContactError(error)))\r\n// }\r\n\r\n\r\nconst addContact = ( name, number ) => dispatch => {\r\n    const contact = { name, number };\r\n    dispatch(addContactRequest());\r\n    axios.post(`/contacts`, contact)\r\n        .then(({ data }) => dispatch(addContactSuccess(data)),\r\n        )\r\n        .catch(error => dispatch(addContactError(error)))\r\n}\r\n\r\nconst deleteContact = contactId => dispatch => {\r\n    dispatch(deleteContactRequest());\r\n\r\n    axios.delete(`/contacts/${contactId}`)\r\n        .then(() => dispatch(deleteContactSuccess(contactId)))\r\n        .catch(error => dispatch(deleteContactError(error)));\r\n}\r\n\r\nconst contactsOperations = {\r\n    fetchContact,\r\n    addContact,\r\n    deleteContact,\r\n};\r\n\r\nexport default contactsOperations;","import { createSelector } from 'reselect';\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\nconst getFilteredContacts = createSelector(\r\n    [getAllContacts, getFilter], (contacts,filter) => {\r\n        const normalizedFilter = filter.toLowerCase();\r\n        \r\n        return contacts.filter(({ name }) =>\r\n            name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n})\r\n\r\nconst contactsSelectors = {\r\n    getFilter,\r\n    getAllContacts,\r\n    getFilteredContacts,\r\n}\r\n\r\nexport default contactsSelectors;","import { combineReducers } from \"redux\";\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    fetchContactRequest,\r\n    fetchContactSuccess,\r\n    fetchContactError,\r\n    filterContact,\r\n} from './contact-actions';\r\n\r\nconst items = createReducer([], {\r\n    [fetchContactSuccess]: (_, { payload }) => payload,\r\n    [addContactSuccess]: (state, { payload }) =>\r\n        [...state, payload],\r\n    [deleteContactSuccess]: (state, { payload }) =>\r\n        state.filter(({ id }) => id !== payload),\r\n})\r\n\r\nconst filter = createReducer('', {\r\n    [filterContact]: (_, { payload }) => payload,\r\n})\r\n\r\nconst loading = createReducer(false, {\r\n    [fetchContactRequest]: () => true,\r\n    [fetchContactSuccess]: () => false,\r\n    [fetchContactError]: () => false,\r\n    [addContactRequest]: () => true,\r\n    [addContactSuccess]: () => false,\r\n    [addContactError]: () => false,\r\n    [deleteContactRequest]: () => true,\r\n    [deleteContactSuccess]: () => false,\r\n    [deleteContactError]: () => false,\r\n\r\n})\r\n\r\nconst error = createReducer(null, {});\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n    loading,\r\n    error,\r\n})","// import React from 'react'\r\nimport style from './ContactList.module.css'\r\nimport {contactsOperations, contactsSelectors } from '../../redux/contacts';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useEffect } from 'react';\r\n\r\nexport default function ContactList() {\r\n    const dispatch = useDispatch();\r\n    const contacts = useSelector(contactsSelectors.getFilteredContacts);\r\n    const onDeleteContact= id => dispatch(contactsOperations.deleteContact(id));\r\n    \r\n    useEffect(() => {\r\n        dispatch(contactsOperations.fetchContact());\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <ul className={style.ContactListUl}>\r\n            {contacts.map(({ id, name, number }) => (\r\n                <li className={style.ContactListLi} key={id}>\r\n                    <p>{name}: \r\n                        <span>{number}</span>\r\n                    </p> \r\n                    <button\r\n                        type=\"button\"\r\n                        className={style.ContactBtnDel}\r\n                        onClick={()=>onDeleteContact(id)}>Delete</button>  \r\n                </li>\r\n            ))}\r\n        </ul>\r\n)\r\n} \r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport { contactsSelectors, filterContact } from '../../redux/contacts';\r\nimport styles from './Filter.module.css';\r\n\r\nexport default function Filter() {\r\n  const dispatch = useDispatch();\r\n  const value = useSelector(contactsSelectors.getFilter);\r\n\r\n  return (\r\n    <div className={styles.filter}>\r\n      <p className={styles.label}>Find contacts by name</p>\r\n      <input\r\n        type=\"text\"\r\n        className={styles.input}\r\n        value={value}\r\n        onChange={e => dispatch(filterContact(e.target.value))}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport style from './ContactForm.module.css';\r\n// import { connect } from 'react-redux';\r\nimport { contactsSelectors, contactsOperations } from '../../redux/contacts';\r\n\r\nexport default  function ContactForm () {\r\n    const dispatch = useDispatch();\r\n    const contacts = useSelector(contactsSelectors.getAllContacts);\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n    \r\n    const nameInputId = uuidv4();\r\n    const numberInputId = uuidv4();\r\n\r\n    \r\n    const handleChange = event => {\r\n        const { name, value } = event.currentTarget;\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n            case 'number':\r\n                setNumber(value);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n    \r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        dispatch(contactsOperations.addContact(contacts, name, number ));\r\n        setName('');\r\n        setNumber('');\r\n    }\r\n    \r\n    return (\r\n        <form className={style.ContactForm} onSubmit={handleSubmit}>\r\n            <label className={style.ContactLabel} htmlFor={nameInputId}>\r\n                Name\r\n                <input\r\n                    className={style.ContactInput}\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\" required\r\n                    // required\r\n                    id={nameInputId}\r\n                    value={name}\r\n                    onChange={handleChange}\r\n                />\r\n            </label>\r\n            <label htmlFor={numberInputId} className={style.ContactLabel}>\r\n                Number\r\n                <input\r\n                    className={style.ContactInput}\r\n                    type=\"tel\"\r\n                    name=\"number\"\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                    value={number}\r\n                    onChange={handleChange}\r\n                    id={numberInputId} />\r\n            </label>\r\n\r\n            <button\r\n                className={style.ContactBtn}\r\n                type=\"submit\">Add contact</button>\r\n        </form>\r\n    );\r\n}\r\n","import { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport Container from '../component/Container';\r\nimport ContactList from '../component/ContactList';\r\nimport Filter from '../component/Filter';\r\nimport ContactForm from '../component/ContactForm';\r\nimport { contactsOperations} from '../redux/contacts';\r\n\r\n\r\nexport default function ContactsView(params) {\r\n  const dispatch = useDispatch();\r\n  // const isLoadingContacts = useSelector(contactsSelectors.getLoading);\r\n\r\n  useEffect(() => dispatch(contactsOperations.fetchContact()), [dispatch]);\r\n\r\n  return (\r\n    <Container>\r\n      \r\n      {/* {isLoadingContacts && <h1>Загружаем...</h1>} */}\r\n      <ContactForm />\r\n      <Filter />\r\n      <ContactList />\r\n    </Container>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport styles from './Views.module.css';\r\n\r\nconst HomeView = () => (\r\n    <div className={styles.container}>\r\n        <h1 className={styles.title}>\r\n           Phonebook\r\n        </h1>\r\n    </div>\r\n);\r\n\r\nexport default HomeView;","import { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { authOperations } from '../redux/auth';\r\nimport styles from './Views.module.css';\r\n\r\nexport default function RegisterView() {\r\n    const dispatch = useDispatch();\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPasword] = useState('');\r\n\r\n    const handleChange = ({ target: { name, value } }) => {\r\n        switch (name) {\r\n            case 'name':\r\n                return setName(value);\r\n            case 'email':\r\n                return setEmail(value);\r\n            case 'password':\r\n                return setPasword(value);\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        dispatch(authOperations.register({ name, email, password }));\r\n        setName('');\r\n        setEmail('');\r\n        setPasword('');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Страница регистрации</h1>\r\n\r\n            <form onSubmit={handleSubmit} className={styles.form} autoComplete=\"off\">\r\n                <label style={styles.label}>\r\n                    Имя\r\n                    <input type=\"text\" name=\"name\" value={name} onChange={handleChange} />\r\n                </label>\r\n\r\n                <label className={styles.label}>\r\n                    Почта\r\n                    <input\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        value={email}\r\n                        onChange={handleChange}\r\n                    />\r\n                </label>\r\n\r\n                <label className={styles.label}>\r\n                    \r\n                    Пароль\r\n                    <input\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        value={password}\r\n                        onChange={handleChange}\r\n                    />\r\n                </label>\r\n            <button type=\"submit\">Зарегистрироваться</button>\r\n            </form>\r\n        </div>\r\n        );\r\n  }\r\n\r\n// const mapDispatchToProps = {\r\n//   onRegister: authOperations.register,\r\n// };\r\n\r\n// export default connect(null, mapDispatchToProps)(RegisterView);","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { authOperations } from '../redux/auth';\r\nimport styles from './Views.module.css';\r\n\r\nexport default function LoginView() {\r\n  const dispatch = useDispatch();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const handleChange = ({ target: { name, value } }) => {\r\n    switch (name) {\r\n      case 'email':\r\n        return setEmail(value);\r\n      case 'password':\r\n        return setPassword(value);\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    dispatch(authOperations.logIn({ email, password }));\r\n    setEmail('');\r\n    setPassword('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Страница логина</h1>\r\n\r\n      <form onSubmit={handleSubmit} className={styles.form} autoComplete=\"off\">\r\n        <label className={styles.label}>\r\n          Почта\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            value={email}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n\r\n        <label sclassName={styles.label}>\r\n          Пароль\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            value={password}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n\r\n        <button type=\"submit\">Войти</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Switch, Route } from 'react-router-dom';\nimport AppBar from './component/AppBar/AppBar';\nimport ContactsView from './views/ContactsView';\nimport HomeView from './views/HomeView';\nimport RegisterView from './views/RegisterView';\nimport LoginView from './views/LoginView';\nimport Container from './component/Container'\nimport { authOperations } from './redux/auth';\n// import './App.css'\n\nexport default function App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(authOperations.fetchCurrentUser());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <AppBar />\n\n      <Switch>\n        <Route exact path=\"/\" component={HomeView} />\n        <Route path=\"/register\" component={RegisterView} />\n        <Route path=\"/login\" component={LoginView} />\n        <Route path=\"/contacts\" component={ContactsView} />\n      </Switch>\n    </Container>\n  );\n}\n\n","// import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n// import contactReducer from './contacts/contact-reducer';\r\n// import { authReducer } from './auth';\r\n// import {\r\n//     persistStore,\r\n//     persistReducer,\r\n//     FLUSH,\r\n//     REHYDRATE,\r\n//     PAUSE,\r\n//     PERSIST,\r\n//     PURGE,\r\n//     REGISTER\r\n// } from 'redux-persist';\r\n// import storage from 'redux-persist/lib/storage';\r\n\r\n// // import persistReducer from 'redux-persist/es/persistReducer';\r\n\r\n// const middleware = [...getDefaultMiddleware({\r\n//     serializableCheck: {\r\n//         ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n//     },\r\n// }),\r\n// ];\r\n\r\n// const authPersistConfig = {\r\n//     key: 'auth',\r\n//     storage,\r\n//     whitelist: ['token'],\r\n// };\r\n\r\n// export const store = configureStore({\r\n//     reducer: {\r\n//         contacts: contactReducer,\r\n//         auth: persistReducer(authPersistConfig, authReducer),\r\n//     },\r\n//     middleware,\r\n//     devTools: process.env.NODE_ENV === 'development',\r\n// })\r\n\r\n// export const persistor = persistStore(store);\r\n\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { contactReducer }  from './contacts';\r\nimport { authReducer } from './auth';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n];\r\n\r\nconst authPersistConfig = {\r\n  key: 'auth',\r\n  storage,\r\n  whitelist: ['token'],\r\n};\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    auth: persistReducer(authPersistConfig, authReducer),\r\n    contacts: contactReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport const persistor = persistStore(store);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { persistor, store } from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport 'modern-normalize/modern-normalize.css';\n\n// console.log(store);\n// console.log(store.getState());\n// store.dispatch(myAction);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}