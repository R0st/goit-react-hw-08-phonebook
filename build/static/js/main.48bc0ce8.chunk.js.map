{"version":3,"sources":["component/ContactForm/ContactForm.module.css","component/ContactList/ContactList.module.css","component/Filter/Filter.module.css","redux/contact-actions.js","redux/contact-operations.js","component/ContactForm/ContactForm.js","redux/contacts-selectors.js","component/ContactList/ContactList.js","component/Filter/Filter.js","App.js","redux/contact-reducer.js","redux/store.js","index.js"],"names":["module","exports","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterContact","axios","defaults","baseURL","fetchContact","dispatch","a","get","data","connect","onAddSubmit","name","number","contact","post","then","catch","error","contactOperations","useState","setName","setNumber","nameInputId","uuidv4","numberInputId","handleChange","event","currentTarget","value","reset","className","style","ContactForm","onSubmit","e","preventDefault","ContactLabel","htmlFor","ContactInput","type","pattern","title","required","id","onChange","ContactBtn","getFilter","state","contacts","filter","getFilteredContacts","createSelector","items","normalizedFilter","toLowerCase","includes","contactsSelectors","onDeleteContact","contactId","delete","useEffect","ContactListUl","map","ContactListLi","ContactBtnDel","onClick","contactActions","target","styles","filterLabel","App","createReducer","_","payload","loading","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","next","action","console","log","logger","configureStore","reducer","contactReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.48bc0ce8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactForm\":\"ContactForm_ContactForm__334f8\",\"ContactLabel\":\"ContactForm_ContactLabel__236TT\",\"ContactInput\":\"ContactForm_ContactInput__1DRCB\",\"ContactBtn\":\"ContactForm_ContactBtn__1fMK0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactListLi\":\"ContactList_ContactListLi__wVnYE\",\"ContactBtnDel\":\"ContactList_ContactBtnDel__1v9Sm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterLabel\":\"Filter_filterLabel__2UEsk\"};","\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactError = createAction('contacts/fetchContactError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const filterContact = createAction('contacts/filter');\r\n","import axios from 'axios';\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    fetchContactRequest,\r\n    fetchContactSuccess,\r\n    fetchContactError,\r\n} from './contact-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nexport const fetchContact = () => async dispatch => {\r\n    dispatch(fetchContactRequest());\r\n    try {\r\n        const { data } = await axios.get('/contacts');\r\n        dispatch(fetchContactSuccess(data));\r\n    } catch (error) {\r\n        dispatch(fetchContactError(error));\r\n    }\r\n}\r\n\r\n// export const fetchContact = () => dispatch => {\r\n//     dispatch(fetchContactRequest());\r\n//     axios.get('/contacts')\r\n//         .then(({ data }) => dispatch(fetchContactSuccess(data)))\r\n//         .catch(error => dispatch(fetchContactError(error)))\r\n// }\r\n\r\n\r\nexport const addContact = ( name, number ) => dispatch => {\r\n    const contact = { name, number };\r\n    dispatch(addContactRequest());\r\n    axios.post(`/contacts`, contact)\r\n        .then(({ data }) => dispatch(addContactSuccess(data)),\r\n        )\r\n        .catch(error => dispatch(addContactError(error)))\r\n}\r\n\r\nexport const deleteContact = contactId => dispatch => {\r\n    dispatch(deleteContactRequest());\r\n    axios.delete(`/contacts/${contactId}`)\r\n        .then(() => dispatch(deleteContactSuccess(contactId)))\r\n        .catch(error => dispatch(deleteContactError(error)));\r\n}","import React, { useState } from 'react'\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport style from './ContactForm.module.css'\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport * as contactOperations from '../../redux/contact-operations';\r\n\r\nconst ContactForm = ({ onAddSubmit }) => {\r\n\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n    \r\n    const nameInputId = uuidv4();\r\n    const numberInputId = uuidv4();\r\n\r\n    \r\n    const handleChange = event => {\r\n        const { name, value } = event.currentTarget;\r\n\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n            case 'number':\r\n                setNumber(value);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n    \r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        onAddSubmit(name, number);\r\n        return reset();\r\n    };\r\n\r\n    const reset = () => {\r\n        setNumber(\"\");\r\n        setName(\"\")\r\n    }\r\n    return (\r\n        <form className={style.ContactForm} onSubmit={handleSubmit}>\r\n            <label className={style.ContactLabel} htmlFor={nameInputId}>\r\n                Имя\r\n                <input\r\n                    className={style.ContactInput}\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\" required\r\n                    // required\r\n                    id={nameInputId}\r\n                    value={name}\r\n                    onChange={handleChange}\r\n                />\r\n            </label>\r\n            <label htmlFor={numberInputId} className={style.ContactLabel}>\r\n                Номер\r\n                <input\r\n                    className={style.ContactInput}\r\n                    type=\"tel\"\r\n                    name=\"number\"\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                    value={number}\r\n                    onChange={handleChange}\r\n                    id={numberInputId} />\r\n            </label>\r\n\r\n            <button\r\n                className={style.ContactBtn}\r\n                type=\"submit\">Add contact</button>\r\n        </form>\r\n    );\r\n}\r\n    ContactForm.propTypes = {\r\n        name: PropTypes.string,\r\n        number: PropTypes.number,\r\n};\r\n    \r\nconst mapDispatchToProps = dispatch => ({\r\n    onAddSubmit: (name, number) => dispatch(contactOperations.addContact(name, number)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm)\r\n//     state = {\r\n//         number: \"\",\r\n//         name: \"\",\r\n//     }\r\n\r\n//     nameInputId = uuidv4();\r\n//     numberInputId = uuidv4();\r\n\r\n//     handleChange = e => {\r\n//         const { name, value } = e.currentTarget;\r\n//         this.setState({ [name]: value });\r\n//     };\r\n\r\n//     handleSubmit = e => {\r\n//         e.preventDefault();\r\n//         this.props.onSubmit(this.state.name, this.state.number)\r\n//         this.reset();\r\n//     };\r\n\r\n//     reset = () => {\r\n//         this.setState({name: \"\", number: \"\"})\r\n//     }\r\n//     render() {\r\n//         return (\r\n//             <form className={style.ContactForm} onSubmit={this.handleSubmit}>\r\n//                 <label className={style.ContactLabel} htmlFor={this.nameInputId}>\r\n//                     Имя\r\n//                     <input\r\n//                         className={style.ContactInput}\r\n//                         type=\"text\"\r\n//                         name=\"name\"\r\n//                         pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//                         title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"required\r\n//                         // required\r\n//                         id={this.nameInputId}\r\n//                         value={this.state.name}\r\n//                         onChange={this.handleChange}\r\n//                     />\r\n//                 </label>\r\n//                 <label htmlFor={this.numberInputId} className={style.ContactLabel}>\r\n//                     Номер\r\n//                     <input\r\n//                         className={style.ContactInput}\r\n//                         type=\"tel\"\r\n//                         name=\"number\"\r\n//                         pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//                         title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//                         required\r\n//                         value={this.state.number}\r\n//                         onChange={this.handleChange}\r\n//                         id={this.numberInputId}/>\r\n//                 </label>\r\n\r\n//                 <button \r\n//                     className={style.ContactBtn}\r\n//                     type=\"submit\">Add contact</button>\r\n//             </form>\r\n//         );\r\n//     }   \r\n// }\r\n\r\n// export default ContactForm;","import { createSelector } from 'reselect';\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nconst getAllContacts=state=>state.contacts.items\r\n// const getFilteredContacts = state => {\r\n//     const contacts = getAllContacts(state);\r\n//     const filter = getFilter(state);\r\n//     const normalizedFilter = filter.toLowerCase();\r\n//     return contacts.filter(({name}) =>\r\n//         name.toLowerCase().includes(normalizedFilter),\r\n//     );\r\n// }\r\n\r\nconst getFilteredContacts = createSelector(\r\n    [getAllContacts, getFilter], (contacts,filter) => {\r\n        const normalizedFilter = filter.toLowerCase();\r\n        \r\n        return contacts.filter(({ name }) =>\r\n            name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n})\r\n\r\nexport default {\r\n    getFilter,\r\n    getFilteredContacts,\r\n}","import React from 'react'\r\nimport style from './ContactList.module.css'\r\nimport { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport * as contactOperations from '../../redux/contact-operations';\r\nimport contactsSelectors from '../../redux/contacts-selectors';\r\n\r\n// \r\nconst ContactList = ({ contacts, onDeleteContact }) => {\r\n    // const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        (contactOperations.fetchContact());\r\n    });\r\n    return (\r\n    <ul className={style.ContactListUl}>\r\n        {contacts.map(({ id, name, number }) => (\r\n            <li className={style.ContactListLi} key={id}>\r\n                <p>{name}: \r\n                    <span>{number}</span>\r\n                </p> \r\n                <button \r\n                    className={style.ContactBtnDel}\r\n                    onClick={()=>onDeleteContact(id)}>Delete</button>  \r\n            </li>\r\n        ))}\r\n    </ul>\r\n)\r\n} \r\n\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.array.isRequired,\r\n    onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n// const getFilteredContacts = (allContacts, filter) => {\r\n//     const normalizedFilter = filter.toLowerCase();\r\n//     return allContacts.filter(({name}) =>\r\n//         name.toLowerCase().includes(normalizedFilter),\r\n//     );\r\n//   }\r\n\r\n// const mapStateToProps = (state) => {\r\n//     const { filter, items } = state.contacts;\r\n//     const newFilteredContacts = getFilteredContacts(items, filter);\r\n//     return {\r\n//         contacts: newFilteredContacts,\r\n//     }  \r\n// }\r\n//составляем пропсы, происходит операция фильтров\r\nconst mapStateToProps = (state) => ({\r\n    contacts: contactsSelectors.getFilteredContacts(state),\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchContact: () => dispatch(contactOperations.fetchContact()),\r\n    onDeleteContact: (id) => dispatch(contactOperations.deleteContact(id)),\r\n    \r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport * as contactActions from '../../redux/contact-actions';\r\nimport styles from './Filter.module.css'\r\nimport contactsSelectors  from '../../redux/contacts-selectors';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n    \r\n    <label className={styles.filterLabel}>\r\n          Find contacts by name\r\n          <input \r\n            type=\"text\" \r\n            value={value}\r\n            onChange={onChange}\r\n            className=\"filterInput\"/>\r\n    </label>\r\n)\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    value: contactsSelectors.getFilter(state),\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChange: (e) => dispatch(\r\n        contactActions.filterContact(e.target.value))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n\r\n\r\n","// import React, { useState,useEffect } from 'react';\n// import { v4 as uuidv4 } from 'uuid';\nimport ContactForm from './component/ContactForm/ContactForm';\nimport ContactList from './component/ContactList';\nimport Filter from './component/Filter/Filter';\nimport './App.css'\n// const initialContacts = [\n//   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n// ];\n\nexport default function App() {\n  return (\n        <div className=\"divApp\">\n        <h1>Phonebook</h1>\n          <ContactForm  />\n          <h2>Contacts</h2>\n          <ContactList />\n          <Filter />\n      </div>\n    )\n}\n  // const [contacts, ] = useState(() => {\n  //   return JSON.parse(window.localStorage.getItem('contacts')) ?? initialContacts\n  // });\n\n  // // const [filter, setFilter] = useState('');\n\n  // useEffect(() => {\n  //   window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  // }, [contacts]);\n\n  // const changeFilter = e => {\n  //   setFilter(e.currentTarget.value);\n  // }\n  \n  // const addContact = (name, number) => {\n  //   const contact = {\n  //     id: uuidv4(),\n  //     name,\n  //     number,\n  //   };\n\n  //   if (!contacts.map(contact => contact.name).includes(name)) {\n  //     setContacts(prevState => [contact, ...prevState]);\n  //   }\n  // else {\n  //     alert(`${name} is already in contacs.`)\n  //   }\n  // };\n\n  // const getFilteredContacts = () => {\n  //   const normalizedFilter = filter.toLowerCase();\n  // return contacts.filter(contact =>\n  //   contact.name.toLowerCase().includes(normalizedFilter),\n  //   );\n  // }\n\n  // const deleteContact = contactId => {\n  //   setContacts(prevContacts=> prevContacts.filter(contact=>contact.id !==contactId))\n  // }\n  \n  \n// class App extends Component {\n//   state = {\n//   contacts: [\n//     {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\n//     {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\n//     {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\n//     {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},\n//   ],\n//   filter: '',\n// }\n\n//   componentDidMount() {\n//     const contacts = localStorage.getItem('contacts');\n//     const parsedContacts = JSON.parse(contacts);\n    \n//     if (parsedContacts) {\n//       this.setState({ contacts: parsedContacts });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (this.state.contacts !== prevState.constacts) {\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//     }\n//   }  \n  \n//   changeFilter = e => {\n//     this.setState({filter: e.currentTarget.value});\n// }\n  \n//   addContact = (name, number) => {\n//     const contact = {\n//       id: uuidv4(),\n//       name,\n//       number,\n//     };\n\n// if (!this.state.contacts.map(contact => contact.name).includes(name)) {\n\n//     this.setState(({contacts}) => ({\n//       contacts: [contact, ...contacts],\n//     }));\n//   }\n//   else {\n//       alert(`${name} is already in contacs.`)\n//     }\n//   };\n  \n//   handleNameChange = event => {\n//     this.setState({name: event.currentTarget.value})\n//   }\n\n//   // formSubmitHandler = data => {\n//   //   console.log(data);\n//   // }\n\n//   getFilteredContacts = () => {\n//     const {filter, contacts} = this.state;\n//     const normalizedFilter = filter.toLowerCase();\n//   return contacts.filter(contact =>\n//     contact.name.toLowerCase().includes(normalizedFilter),\n//     );\n//   }\n\n//   deleteContact = contactId => {\n//     this.setState(prevState=> ({\n//       contacts: prevState.contacts.filter(contact=>contact.id !==contactId)\n//     }))\n//   }\n  \n//   render() {\n//     const { filter } = this.state;\n//     const filteredContacts = this.getFilteredContacts();\n\n//     return (\n//         <>\n//         <h1>Phonebook</h1>\n//           <ContactForm onSubmit={this.addContact} />\n//           <h2>Contacts</h2>\n//           <ContactList contacts={filteredContacts} onDeleteContact={this.deleteContact}/>\n//           <Filter value={filter} onChange={this.changeFilter}/>\n//       </>\n//     )\n//   }\n// }\n\n// export default App;\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport { addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    fetchContactRequest,\r\n    fetchContactSuccess,\r\n    fetchContactError,\r\n    filterContact,\r\n} from './contact-actions';\r\n\r\nconst items = createReducer([], {\r\n    [fetchContactSuccess]: (_, {payload})=>payload,\r\n    [addContactSuccess]: (state, {payload}) =>\r\n        [...state, payload],\r\n    [deleteContactSuccess]: (state, {payload}) =>\r\n        state.filter(({ id }) => id !== payload),        \r\n})\r\n\r\nconst filter = createReducer('', {\r\n    [filterContact]: (_, {payload}) => payload,   \r\n})\r\n\r\nconst loading = createReducer(false, {\r\n    [fetchContactRequest]: () => true,\r\n    [fetchContactSuccess]: () => false,\r\n    [fetchContactError]: () => false,\r\n    [addContactRequest]: () => true,\r\n    [addContactSuccess]: () => false,\r\n    [addContactError]: () => false,\r\n    [deleteContactRequest]: () => true,\r\n    [deleteContactSuccess]: () => false,\r\n    [deleteContactError]: () => false,\r\n    \r\n})\r\n\r\nconst error = createReducer(null, {});\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n    loading,\r\n    error,\r\n})","// import {  combineReducers } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { configureStore, getDefaultMiddleware  } from '@reduxjs/toolkit';\r\nimport contactReducer from './contact-reducer';\r\nimport logger  from 'redux-logger';\r\nimport {\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER\r\n} from 'redux-persist';\r\n\r\nconst myMiddleware = store => next => action => {\r\n    console.log('моя прослойка', action);\r\n    next(action)\r\n}\r\n\r\nconst middleware = [...getDefaultMiddleware({\r\n    serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n}), myMiddleware,\r\n    logger,];\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts: contactReducer\r\n    },\r\n    middleware,\r\n    devTools: process.env.NODE_ENV==='development',\r\n})\r\n\r\n// const persistor = persistStore(store);\r\n// const storeFin ={store, persistor}\r\n\r\nexport default store;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n// import { myAction } from './redux/actions';\nimport 'modern-normalize/modern-normalize.css';\n// import { PersistGate } from 'redux-persist/integration/react';\n\n// console.log(store);\n// console.log(store.getState());\n// store.dispatch(myAction);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      \n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      \n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}